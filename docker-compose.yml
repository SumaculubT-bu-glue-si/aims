version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: studio_db
      MYSQL_USER: admin_user
      MYSQL_PASSWORD: admin123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin_user", "-padmin123" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Laravel Backend (Assuming PHP-FPM and Nginx are used)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: laravel_backend
    restart: unless-stopped
    # Use expose instead of ports if Nginx is handling external traffic
    expose:
      - "9000" # PHP-FPM default port
    volumes:
      - ./server:/var/www/html
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=studio_db
      - DB_USERNAME=admin_user
      - DB_PASSWORD=admin123
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: nextjs_frontend
    restart: unless-stopped
    command: npm run dev
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - node_modules_client:/app/node_modules # Use named volume
    depends_on:
      - backend
    environment:
      # CRITICAL FIX: Use the service name 'backend' to communicate
      - NEXT_PUBLIC_API_URL=http://localhost/api
      - NEXT_PUBLIC_GRAPHQL_URL=http://backend:9000/api/graphql
    networks:
      - app-network

  # Nginx Reverse Proxy (Requires custom nginx.conf to map ports)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # GWS User Sync Service (runs once at startup)
  gws-sync:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: gws_sync
    restart: "no"
    volumes:
      - ./server:/var/www/html
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=studio_db
      - DB_USERNAME=admin_user
      - DB_PASSWORD=admin123
    networks:
      - app-network
    command: >
      bash -c "
        echo 'Waiting for backend to be ready...' &&
        until curl -f http://backend:9000; do sleep 5; done &&
        echo 'Backend ready! Running GWS sync once...' &&
        php artisan gws:sync-users bu.glue-si.com --all &&
        echo 'GWS sync completed successfully!' &&
        exit 0
      "

  # Queue Worker Service
  queue-worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: queue_worker
    restart: unless-stopped
    volumes:
      - ./server:/var/www/html
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=studio_db
      - DB_USERNAME=admin_user
      - DB_PASSWORD=admin123
    networks:
      - app-network
    command: >
      bash -c "
        echo 'Waiting for backend to be ready...' &&
        until curl -f http://backend:9000; do sleep 5; done &&
        echo 'Backend ready! Starting queue worker...' &&
        php artisan queue:work --daemon
      "

volumes:
  mysql_data:
  node_modules_client:
    # Define the named volume

networks:
  app-network:
    driver: bridge
